// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ce

import (
	"github.com/untillpro/voedger/pkg/apps"
	"github.com/untillpro/voedger/pkg/ibus"
	"github.com/untillpro/voedger/pkg/ibusmem"
	"github.com/untillpro/voedger/pkg/ihttp"
	"github.com/untillpro/voedger/pkg/ihttpctl"
	"github.com/untillpro/voedger/pkg/ihttpimpl"
)

import (
	_ "embed"
)

// Injectors from wire.go:

func wireServer(cliParams ibus.CLIParams, ihttpCLIParams ihttp.CLIParams) (WiredServer, func(), error) {
	iBus, cleanup := ibusmem.New(cliParams)
	ihttpProcessor, cleanup2, err := ihttpimpl.NewProcessor(ihttpCLIParams, iBus)
	if err != nil {
		cleanup()
		return WiredServer{}, nil, err
	}
	ihttpProcessorAPI, err := ihttpimpl.NewAPI(iBus, ihttpProcessor)
	if err != nil {
		cleanup2()
		cleanup()
		return WiredServer{}, nil, err
	}
	v := apps.ProvideStaticEmbeddedResources()
	ihttpProcessorController, err := ihttpctl.NewHTTPProcessorController(ihttpProcessorAPI, v)
	if err != nil {
		cleanup2()
		cleanup()
		return WiredServer{}, nil, err
	}
	wiredServer := WiredServer{
		IBus:                     iBus,
		IHTTPProcessor:           ihttpProcessor,
		IHTTPProcessorAPI:        ihttpProcessorAPI,
		IHTTPProcessorController: ihttpProcessorController,
	}
	return wiredServer, func() {
		cleanup2()
		cleanup()
	}, nil
}
