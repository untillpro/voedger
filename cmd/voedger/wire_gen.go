// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/voedger/voedger/pkg/apps"
	"github.com/voedger/voedger/pkg/ihttp"
	"github.com/voedger/voedger/pkg/ihttpctl"
	"github.com/voedger/voedger/pkg/ihttpimpl"
	"github.com/voedger/voedger/pkg/istorage"
	"github.com/voedger/voedger/pkg/istorageimpl"
)

import (
	_ "embed"
)

// Injectors from wire.go:

func wireServer(httpCliParams ihttp.CLIParams, appsCliParams apps.CLIParams) (WiredServer, func(), error) {
	iAppStorageFactory, err := apps.NewAppStorageFactory(appsCliParams)
	if err != nil {
		return WiredServer{}, nil, err
	}
	iAppStorageProvider := provideAppStorageProvider(iAppStorageFactory)
	iRouterStorage, err := ihttp.NewIRouterStorage(iAppStorageProvider)
	if err != nil {
		return WiredServer{}, nil, err
	}
	ihttpProcessor, cleanup, err := ihttpimpl.NewProcessor(httpCliParams, iRouterStorage)
	if err != nil {
		return WiredServer{}, nil, err
	}
	v := apps.NewStaticEmbeddedResources()
	redirectRoutes := apps.NewRedirectionRoutes()
	defaultRedirectRoute := apps.NewDefaultRedirectionRoute()
	acmeDomains := httpCliParams.AcmeDomains
	appRequestHandlers := apps.NewAppRequestHandlers()
	ihttpProcessorController, err := ihttpctl.NewHTTPProcessorController(ihttpProcessor, v, redirectRoutes, defaultRedirectRoute, acmeDomains, appRequestHandlers)
	if err != nil {
		cleanup()
		return WiredServer{}, nil, err
	}
	wiredServer := WiredServer{
		IHTTPProcessor:           ihttpProcessor,
		IHTTPProcessorController: ihttpProcessorController,
	}
	return wiredServer, func() {
		cleanup()
	}, nil
}

// wire.go:

// provideAppStorageProvider is intended to be used by wire instead of istorageimpl.Provide, because wire can not handle variadic arguments
func provideAppStorageProvider(appStorageFactory istorage.IAppStorageFactory) istorage.IAppStorageProvider {
	return istorageimpl.Provide(appStorageFactory)
}
