{{define "item"}}

{{if (ne .Type "Projector")}}
type {{.Type}}_{{.Package.Name}}_{{.Name}} struct {
    Type
}
{{end}}

{{if and (ne .Type "Command") (ne .Type "Query") (ne .Type "Projector")}}
type Value_{{.Type}}_{{.Package.Name}}_{{.Name}} struct{
    tv exttinygo.TValue
	{{if or (eq .Type "CDoc") (eq .Type "WDoc") (eq .Type "View") (eq .Type "WSingleton")}}kb exttinygo.TKeyBuilder{{end}}
}
{{end}}

{{if and (ne .Type "Command") (ne .Type "Query") (ne .Type "Projector")}}
type Intent_{{.Type}}_{{.Package.Name}}_{{.Name}} struct{
intent exttinygo.TIntent
}
{{end}}

{{if (eq .Type "ORecord")}}
type Container_ORecord_{{.Package.Name}}_{{.Name}} struct {
    tv  exttinygo.TValue
    len int
}
{{end}}

{{if (eq .Type "Projector")}}

type ProjectorArg_{{.Package.Name}}_{{.Name}} struct {
    qname string
	value exttinygo.TValue
}

func (pa ProjectorArg_{{.Package.Name}}_{{.Name}}) QName() string {
    return pa.qname
}

func (pa ProjectorArg_{{.Package.Name}}_{{.Name}}) Get() exttinygo.TValue {
    return pa.value
}

type {{.Type}}_{{.Package.Name}}_{{.Name}} struct {
Type
event exttinygo.TValue
}

func (pkg TPackage_{{.Package.Name}}) Projector_{{.Name}}() Projector_{{.Package.Name}}_{{.Name}} {
    return Projector_{{.Package.Name}}_{{.Name}}{
        event: exttinygo.MustGetValue(exttinygo.KeyBuilder(exttinygo.StorageEvent, exttinygo.NullEntity)),
    }
}

{{/*{{if (isExecutableWithParam .)}}*/}}
{{/*func (p Projector_{{.Package.Name}}_{{.Name}}) Event() ProjectorEvent_{{.Package.Name}}_{{.Name}} {*/}}
{{/*return p.event*/}}
{{/*}*/}}
{{/*{{end}}*/}}

{{end}}


{{template "fields" .}}

{{template "methods" .}}

{{end}}
