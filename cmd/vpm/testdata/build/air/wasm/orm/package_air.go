// Code generated by vpm. DO NOT EDIT.

package orm

import (
	"iter"

	"github.com/voedger/voedger/pkg/exttinygo"
)

// package type
type TPackage_air struct {
	Path                            string
	WS_RestaurantWS                 WS_air_RestaurantWS
	Type_cmd1Params                 Type_air_cmd1Params
	Command_Cmd1                    Command_air_Cmd1
	Command_Orders                  Command_air_Orders
	Type_CmdPBillResult             Type_air_CmdPBillResult
	Command_Pbill                   Command_air_Pbill
	ODoc_ProformaPrinted            ODoc_air_ProformaPrinted
	Command_CmdForProformaPrinted   Command_air_CmdForProformaPrinted
	WSingleton_NextNumbers          WSingleton_air_NextNumbers
	View_PbillDates                 View_air_PbillDates
	View_ProformaPrintedDocs        View_air_ProformaPrintedDocs
	CDoc_VideoRecords               CDoc_air_VideoRecords
	CSingleton_RestaurantDescriptor CSingleton_air_RestaurantDescriptor
	View_VideoRecordArchive         View_air_VideoRecordArchive
}

// package variables
var Package_air = TPackage_air{
	Path: "air",
	WS_RestaurantWS: WS_air_RestaurantWS{
		Type: Type{fQName: "air.RestaurantWS"},
	}, Type_cmd1Params: Type_air_cmd1Params{
		Type: Type{fQName: "air.cmd1Params"},
	}, Command_Cmd1: Command_air_Cmd1{
		Type: Type{fQName: "air.Cmd1"},
	}, Command_Orders: Command_air_Orders{
		Type: Type{fQName: "air.Orders"},
	}, Type_CmdPBillResult: Type_air_CmdPBillResult{
		Type: Type{fQName: "air.CmdPBillResult"},
	}, Command_Pbill: Command_air_Pbill{
		Type: Type{fQName: "air.Pbill"},
	}, ODoc_ProformaPrinted: ODoc_air_ProformaPrinted{
		Type: Type{fQName: "air.ProformaPrinted"},
	}, Command_CmdForProformaPrinted: Command_air_CmdForProformaPrinted{
		Type: Type{fQName: "air.CmdForProformaPrinted"},
	}, WSingleton_NextNumbers: WSingleton_air_NextNumbers{
		Type: Type{fQName: "air.NextNumbers"},
	}, View_PbillDates: View_air_PbillDates{
		Type: Type{fQName: "air.PbillDates"},
	}, View_ProformaPrintedDocs: View_air_ProformaPrintedDocs{
		Type: Type{fQName: "air.ProformaPrintedDocs"},
	}, CDoc_VideoRecords: CDoc_air_VideoRecords{
		Type: Type{fQName: "air.VideoRecords"},
	}, CSingleton_RestaurantDescriptor: CSingleton_air_RestaurantDescriptor{
		Type: Type{fQName: "air.RestaurantDescriptor"},
	}, View_VideoRecordArchive: View_air_VideoRecordArchive{
		Type: Type{fQName: "air.VideoRecordArchive"},
	},
}

type WS_air_RestaurantWS struct {
	Type
}

type Value_WS_air_RestaurantWS struct {
	tv exttinygo.TValue
}

type Intent_WS_air_RestaurantWS struct {
	intent exttinygo.TIntent
}

func (r WS_air_RestaurantWS) PkgPath() string {
	return Package_air.Path
}

func (r WS_air_RestaurantWS) Entity() string {
	return "RestaurantWS"
}

func (r WS_air_RestaurantWS) Descriptor() string {
	return "RestaurantDescriptor"
}

type Type_air_cmd1Params struct {
	Type
}

type Value_Type_air_cmd1Params struct {
	tv exttinygo.TValue
}

type Intent_Type_air_cmd1Params struct {
	intent exttinygo.TIntent
}

func (v Value_Type_air_cmd1Params) Get_sys_Container() string {
	return v.tv.AsString("sys_Container")
}

func (v Value_Type_air_cmd1Params) Get_A() int32 {
	return v.tv.AsInt32("A")
}

func (v Value_Type_air_cmd1Params) Get_B() int32 {
	return v.tv.AsInt32("B")
}

func (v Value_Type_air_cmd1Params) Get_C() string {
	return v.tv.AsString("C")
}

func (r Type_air_cmd1Params) PkgPath() string {
	return Package_air.Path
}

func (r Type_air_cmd1Params) Entity() string {
	return "cmd1Params"
}

type Command_air_Cmd1 struct {
	Type
}

func (r Command_air_Cmd1) PkgPath() string {
	return Package_air.Path
}

func (r Command_air_Cmd1) Entity() string {
	return "Cmd1"
}

func (c Command_air_Cmd1) ArgumentObject() Value_Type_air_cmd1Params {
	kb := exttinygo.KeyBuilder(exttinygo.StorageCommandContext, exttinygo.NullEntity)
	return Value_Type_air_cmd1Params{tv: exttinygo.MustGetValue(kb).AsValue(FieldNameEventArgumentObject)}
}

func (r Command_air_Cmd1) ArgumentPkgPath() string {
	return Package_air.Type_cmd1Params.PkgPath()

}

func (r Command_air_Cmd1) ArgumentEntity() string {
	return Package_air.Type_cmd1Params.Entity()

}

func (r Command_air_Cmd1) WorkspaceDescriptor() string {
	return Package_air.WS_RestaurantWS.Descriptor()
}

type Projector_air_ApplyCmd1 struct {
	Type
	_event exttinygo.TValue
}

func (p Projector_air_ApplyCmd1) Event() Event {
	return Event{
		WLogOffset: p.event().AsInt64("WLogOffset"),
	}
}

func (p Projector_air_ApplyCmd1) event() exttinygo.TValue {
	if p._event == 0 {
		p._event = eventFunc()
	}
	return p._event
}

func (r Projector_air_ApplyCmd1) WorkspaceDescriptor() string {
	return Package_air.WS_RestaurantWS.Descriptor()
}

func (pkg TPackage_air) Projector_ApplyCmd1() Projector_air_ApplyCmd1 {
	return Projector_air_ApplyCmd1{}
}

func (r Projector_air_ApplyCmd1) PkgPath() string {
	return Package_air.Path
}

func (r Projector_air_ApplyCmd1) Entity() string {
	return "ApplyCmd1"
}

type Cmd_air_Cmd1 struct {
	qname string
	event exttinygo.TValue
}

func (c Cmd_air_Cmd1) Arg() (Value_Type_air_cmd1Params, bool) {
	qname := c.event.AsQName("QName")
	if qname.FullPkgName != Package_air.Command_Cmd1.PkgPath() || qname.Entity != Package_air.Command_Cmd1.Entity() {
		return Value_Type_air_cmd1Params{}, false
	}

	return Value_Type_air_cmd1Params{tv: c.event.AsValue("ArgumentObject")}, true
}

func (c Cmd_air_Cmd1) Event() Event {
	return Event{
		WLogOffset: c.event.AsInt64("WLogOffset"),
	}
}

func (p Projector_air_ApplyCmd1) Cmd_Cmd1() Cmd_air_Cmd1 {
	return Cmd_air_Cmd1{
		qname: p.PkgPath() + "." + "Cmd1",
		event: p.event(),
	}
}

type Command_air_Orders struct {
	Type
}

func (r Command_air_Orders) PkgPath() string {
	return Package_air.Path
}

func (r Command_air_Orders) Entity() string {
	return "Orders"
}

func (c Command_air_Orders) ArgumentObject() Value_ODoc_untill_orders {
	kb := exttinygo.KeyBuilder(exttinygo.StorageCommandContext, exttinygo.NullEntity)
	return Value_ODoc_untill_orders{tv: exttinygo.MustGetValue(kb).AsValue(FieldNameEventArgumentObject)}
}

func (r Command_air_Orders) ArgumentPkgPath() string {
	return Package_untill.ODoc_orders.PkgPath()

}

func (r Command_air_Orders) ArgumentEntity() string {
	return Package_untill.ODoc_orders.Entity()

}

func (r Command_air_Orders) WorkspaceDescriptor() string {
	return Package_air.WS_RestaurantWS.Descriptor()
}

type Type_air_CmdPBillResult struct {
	Type
}

type Value_Type_air_CmdPBillResult struct {
	tv exttinygo.TValue
}

type Intent_Type_air_CmdPBillResult struct {
	intent exttinygo.TIntent
}

func (v Value_Type_air_CmdPBillResult) Get_sys_Container() string {
	return v.tv.AsString("sys_Container")
}

func (v Value_Type_air_CmdPBillResult) Get_Number() int32 {
	return v.tv.AsInt32("Number")
}

func (r Type_air_CmdPBillResult) PkgPath() string {
	return Package_air.Path
}

func (r Type_air_CmdPBillResult) Entity() string {
	return "CmdPBillResult"
}

type Command_air_Pbill struct {
	Type
}

func (r Command_air_Pbill) PkgPath() string {
	return Package_air.Path
}

func (r Command_air_Pbill) Entity() string {
	return "Pbill"
}

func (c Command_air_Pbill) ArgumentObject() Value_ODoc_untill_pbill {
	kb := exttinygo.KeyBuilder(exttinygo.StorageCommandContext, exttinygo.NullEntity)
	return Value_ODoc_untill_pbill{tv: exttinygo.MustGetValue(kb).AsValue(FieldNameEventArgumentObject)}
}

func (r Command_air_Pbill) ArgumentPkgPath() string {
	return Package_untill.ODoc_pbill.PkgPath()

}

func (r Command_air_Pbill) ArgumentEntity() string {
	return Package_untill.ODoc_pbill.Entity()

}

func (r Command_air_Pbill) WorkspaceDescriptor() string {
	return Package_air.WS_RestaurantWS.Descriptor()
}

func (c Command_air_Pbill) Result(sys_container string, number int32) {
	__result := exttinygo.NewValue(exttinygo.KeyBuilder(exttinygo.StorageResult, exttinygo.NullEntity))
	__result.PutString("sys_Container", sys_container)
	__result.PutInt32("Number", number)
}

type Projector_air_ApplySalesMetrics struct {
	Type
	_event exttinygo.TValue
}

func (p Projector_air_ApplySalesMetrics) Event() Event {
	return Event{
		WLogOffset: p.event().AsInt64("WLogOffset"),
	}
}

func (p Projector_air_ApplySalesMetrics) event() exttinygo.TValue {
	if p._event == 0 {
		p._event = eventFunc()
	}
	return p._event
}

func (r Projector_air_ApplySalesMetrics) WorkspaceDescriptor() string {
	return Package_air.WS_RestaurantWS.Descriptor()
}

func (pkg TPackage_air) Projector_ApplySalesMetrics() Projector_air_ApplySalesMetrics {
	return Projector_air_ApplySalesMetrics{}
}

func (r Projector_air_ApplySalesMetrics) PkgPath() string {
	return Package_air.Path
}

func (r Projector_air_ApplySalesMetrics) Entity() string {
	return "ApplySalesMetrics"
}

type Cmd_air_Orders struct {
	qname string
	event exttinygo.TValue
}

func (c Cmd_air_Orders) Arg() (Value_ODoc_untill_orders, bool) {
	qname := c.event.AsQName("QName")
	if qname.FullPkgName != Package_air.Command_Orders.PkgPath() || qname.Entity != Package_air.Command_Orders.Entity() {
		return Value_ODoc_untill_orders{}, false
	}

	return Value_ODoc_untill_orders{tv: c.event.AsValue("ArgumentObject")}, true
}

func (c Cmd_air_Orders) Event() Event {
	return Event{
		WLogOffset: c.event.AsInt64("WLogOffset"),
	}
}

func (p Projector_air_ApplySalesMetrics) Cmd_Orders() Cmd_air_Orders {
	return Cmd_air_Orders{
		qname: p.PkgPath() + "." + "Orders",
		event: p.event(),
	}
}

type Cmd_air_Pbill struct {
	qname string
	event exttinygo.TValue
}

func (c Cmd_air_Pbill) Arg() (Value_ODoc_untill_pbill, bool) {
	qname := c.event.AsQName("QName")
	if qname.FullPkgName != Package_air.Command_Pbill.PkgPath() || qname.Entity != Package_air.Command_Pbill.Entity() {
		return Value_ODoc_untill_pbill{}, false
	}

	return Value_ODoc_untill_pbill{tv: c.event.AsValue("ArgumentObject")}, true
}

func (c Cmd_air_Pbill) Event() Event {
	return Event{
		WLogOffset: c.event.AsInt64("WLogOffset"),
	}
}

func (p Projector_air_ApplySalesMetrics) Cmd_Pbill() Cmd_air_Pbill {
	return Cmd_air_Pbill{
		qname: p.PkgPath() + "." + "Pbill",
		event: p.event(),
	}
}

type ODoc_air_ProformaPrinted struct {
	Type
}

type Value_ODoc_air_ProformaPrinted struct {
	tv exttinygo.TValue
}

type Intent_ODoc_air_ProformaPrinted struct {
	intent exttinygo.TIntent
}

func (v Value_ODoc_air_ProformaPrinted) Get_Number() int32 {
	return v.tv.AsInt32("Number")
}

func (v Value_ODoc_air_ProformaPrinted) Get_UserID() ID {
	return ID(v.tv.AsInt64("UserID"))
}

func (v Value_ODoc_air_ProformaPrinted) Get_Timestamp() int64 {
	return v.tv.AsInt64("Timestamp")
}

func (i Intent_ODoc_air_ProformaPrinted) Set_Number(value int32) Intent_ODoc_air_ProformaPrinted {
	i.intent.PutInt32("Number", value)
	return i
}

func (i Intent_ODoc_air_ProformaPrinted) Set_UserID(value ID) Intent_ODoc_air_ProformaPrinted {
	i.intent.PutInt64("UserID", int64(value))
	return i
}

func (i Intent_ODoc_air_ProformaPrinted) Set_Timestamp(value int64) Intent_ODoc_air_ProformaPrinted {
	i.intent.PutInt64("Timestamp", value)
	return i
}

func (r ODoc_air_ProformaPrinted) PkgPath() string {
	return Package_air.Path
}

func (r ODoc_air_ProformaPrinted) Entity() string {
	return "ProformaPrinted"
}

func (v ODoc_air_ProformaPrinted) IAmODoc() {
	return
}

func (v ODoc_air_ProformaPrinted) QName() exttinygo.QName {
	return exttinygo.QName{FullPkgName: v.PkgPath(), Entity: v.Entity()}
}

func (v ODoc_air_ProformaPrinted) Insert(id ID) Intent_ODoc_air_ProformaPrinted {
	kb := exttinygo.KeyBuilder(exttinygo.StorageRecord, v.fQName)
	kb.PutInt64(FieldName_ID, int64(id))
	return Intent_ODoc_air_ProformaPrinted{intent: exttinygo.NewValue(kb)}
}

type Command_air_CmdForProformaPrinted struct {
	Type
}

func (r Command_air_CmdForProformaPrinted) PkgPath() string {
	return Package_air.Path
}

func (r Command_air_CmdForProformaPrinted) Entity() string {
	return "CmdForProformaPrinted"
}

func (c Command_air_CmdForProformaPrinted) ArgumentObject() Value_ODoc_air_ProformaPrinted {
	kb := exttinygo.KeyBuilder(exttinygo.StorageCommandContext, exttinygo.NullEntity)
	return Value_ODoc_air_ProformaPrinted{tv: exttinygo.MustGetValue(kb).AsValue(FieldNameEventArgumentObject)}
}

func (r Command_air_CmdForProformaPrinted) ArgumentPkgPath() string {
	return Package_air.ODoc_ProformaPrinted.PkgPath()

}

func (r Command_air_CmdForProformaPrinted) ArgumentEntity() string {
	return Package_air.ODoc_ProformaPrinted.Entity()

}

func (r Command_air_CmdForProformaPrinted) WorkspaceDescriptor() string {
	return Package_air.WS_RestaurantWS.Descriptor()
}

type Projector_air_FillPbillDates struct {
	Type
	_event exttinygo.TValue
}

func (p Projector_air_FillPbillDates) Event() Event {
	return Event{
		WLogOffset: p.event().AsInt64("WLogOffset"),
	}
}

func (p Projector_air_FillPbillDates) event() exttinygo.TValue {
	if p._event == 0 {
		p._event = eventFunc()
	}
	return p._event
}

func (r Projector_air_FillPbillDates) WorkspaceDescriptor() string {
	return Package_air.WS_RestaurantWS.Descriptor()
}

func (pkg TPackage_air) Projector_FillPbillDates() Projector_air_FillPbillDates {
	return Projector_air_FillPbillDates{}
}

func (r Projector_air_FillPbillDates) PkgPath() string {
	return Package_air.Path
}

func (r Projector_air_FillPbillDates) Entity() string {
	return "FillPbillDates"
}

func (p Projector_air_FillPbillDates) Arg_untill_orders() (Value_ODoc_untill_orders, bool) {
	arg := p.event().AsValue("ArgumentObject")
	argQName := arg.AsQName("sys.QName")
	if argQName.FullPkgName != Package_untill.ODoc_orders.PkgPath() || argQName.Entity != Package_untill.ODoc_orders.Entity() {
		return Value_ODoc_untill_orders{}, false
	}

	return Value_ODoc_untill_orders{tv: arg}, true
}

func (p Projector_air_FillPbillDates) Arg_untill_pbill() (Value_ODoc_untill_pbill, bool) {
	arg := p.event().AsValue("ArgumentObject")
	argQName := arg.AsQName("sys.QName")
	if argQName.FullPkgName != Package_untill.ODoc_pbill.PkgPath() || argQName.Entity != Package_untill.ODoc_pbill.Entity() {
		return Value_ODoc_untill_pbill{}, false
	}

	return Value_ODoc_untill_pbill{tv: arg}, true
}

type WSingleton_air_NextNumbers struct {
	Type
}

type Value_WSingleton_air_NextNumbers struct {
	tv exttinygo.TValue
	kb exttinygo.TKeyBuilder
}

type Intent_WSingleton_air_NextNumbers struct {
	intent exttinygo.TIntent
}

func (v Value_WSingleton_air_NextNumbers) Get_NextPBillNumber() int32 {
	return v.tv.AsInt32("NextPBillNumber")
}

func (i Intent_WSingleton_air_NextNumbers) Set_NextPBillNumber(value int32) Intent_WSingleton_air_NextNumbers {
	i.intent.PutInt32("NextPBillNumber", value)
	return i
}

func (r WSingleton_air_NextNumbers) PkgPath() string {
	return Package_air.Path
}

func (r WSingleton_air_NextNumbers) Entity() string {
	return "NextNumbers"
}

func (v WSingleton_air_NextNumbers) Insert() Intent_WSingleton_air_NextNumbers {
	kb := exttinygo.KeyBuilder(exttinygo.StorageRecord, v.fQName)
	kb.PutBool(FieldName_IsSingleton, true)
	return Intent_WSingleton_air_NextNumbers{intent: exttinygo.NewValue(kb)}
}

func (v WSingleton_air_NextNumbers) Update() Intent_WSingleton_air_NextNumbers {
	existingValue := v.MustGet()
	kb := exttinygo.KeyBuilder(exttinygo.StorageRecord, v.fQName)
	kb.PutBool(FieldName_IsSingleton, true)
	return Intent_WSingleton_air_NextNumbers{intent: exttinygo.UpdateValue(kb, existingValue.tv)}
}

func (v WSingleton_air_NextNumbers) Get() (Value_WSingleton_air_NextNumbers, bool) {
	kb := exttinygo.KeyBuilder(exttinygo.StorageRecord, v.fQName)
	kb.PutBool(FieldName_IsSingleton, true)
	tv, exists := exttinygo.QueryValue(kb)
	if !exists {
		return Value_WSingleton_air_NextNumbers{kb: kb}, false
	}
	return Value_WSingleton_air_NextNumbers{tv: tv, kb: kb}, true
}

func (v WSingleton_air_NextNumbers) MustGet() Value_WSingleton_air_NextNumbers {
	kb := exttinygo.KeyBuilder(exttinygo.StorageRecord, v.fQName)
	kb.PutBool(FieldName_IsSingleton, true)
	tv := exttinygo.MustGetValue(kb)
	return Value_WSingleton_air_NextNumbers{tv: tv, kb: kb}
}

func (v Value_WSingleton_air_NextNumbers) Insert() Intent_WSingleton_air_NextNumbers {
	return Intent_WSingleton_air_NextNumbers{intent: exttinygo.NewValue(v.kb)}
}

func (v Value_WSingleton_air_NextNumbers) Update() Intent_WSingleton_air_NextNumbers {
	return Intent_WSingleton_air_NextNumbers{intent: exttinygo.UpdateValue(v.kb, v.tv)}
}

type View_air_PbillDates struct {
	Type
}

type Value_View_air_PbillDates struct {
	tv exttinygo.TValue
	kb exttinygo.TKeyBuilder
}

type Intent_View_air_PbillDates struct {
	intent exttinygo.TIntent
}

func (v Value_View_air_PbillDates) Get_FirstOffset() int64 {
	return v.tv.AsInt64("FirstOffset")
}

func (v Value_View_air_PbillDates) Get_LastOffset() int64 {
	return v.tv.AsInt64("LastOffset")
}

func (i Intent_View_air_PbillDates) Set_FirstOffset(value int64) Intent_View_air_PbillDates {
	i.intent.PutInt64("FirstOffset", value)
	return i
}

func (i Intent_View_air_PbillDates) Set_LastOffset(value int64) Intent_View_air_PbillDates {
	i.intent.PutInt64("LastOffset", value)
	return i
}

func (r View_air_PbillDates) PkgPath() string {
	return Package_air.Path
}

func (r View_air_PbillDates) Entity() string {
	return "PbillDates"
}

func (v View_air_PbillDates) Insert(year int32, dayofyear int32) Intent_View_air_PbillDates {
	kb := exttinygo.KeyBuilder(exttinygo.StorageView, v.fQName)
	kb.PutInt32("Year", year)
	kb.PutInt32("DayOfYear", dayofyear)
	return Intent_View_air_PbillDates{intent: exttinygo.NewValue(kb)}
}

func (v View_air_PbillDates) Keys() []string {
	return []string{"Year", "DayOfYear"}
}

func (v View_air_PbillDates) Update(year int32, dayofyear int32) Intent_View_air_PbillDates {
	existingValue := v.MustGet(year, dayofyear)
	kb := exttinygo.KeyBuilder(exttinygo.StorageView, v.fQName)
	kb.PutInt32("Year", year)
	kb.PutInt32("DayOfYear", dayofyear)
	return Intent_View_air_PbillDates{intent: exttinygo.UpdateValue(kb, existingValue.tv)}
}

func (v View_air_PbillDates) Get(year int32, dayofyear int32) (Value_View_air_PbillDates, bool) {
	kb := exttinygo.KeyBuilder(exttinygo.StorageView, v.fQName)
	kb.PutInt32("Year", year)
	kb.PutInt32("DayOfYear", dayofyear)
	tv, exists := exttinygo.QueryValue(kb)
	if !exists {
		return Value_View_air_PbillDates{kb: kb}, false
	}
	return Value_View_air_PbillDates{tv: tv, kb: kb}, true
}

func (v View_air_PbillDates) MustGet(year int32, dayofyear int32) Value_View_air_PbillDates {
	kb := exttinygo.KeyBuilder(exttinygo.StorageView, v.fQName)
	kb.PutInt32("Year", year)
	kb.PutInt32("DayOfYear", dayofyear)
	tv := exttinygo.MustGetValue(kb)
	return Value_View_air_PbillDates{tv: tv, kb: kb}
}

func (v Value_View_air_PbillDates) Insert() Intent_View_air_PbillDates {
	return Intent_View_air_PbillDates{intent: exttinygo.NewValue(v.kb)}
}

func (v Value_View_air_PbillDates) Update() Intent_View_air_PbillDates {
	return Intent_View_air_PbillDates{intent: exttinygo.UpdateValue(v.kb, v.tv)}
}

type View_air_ProformaPrintedDocs struct {
	Type
}

type Value_View_air_ProformaPrintedDocs struct {
	tv exttinygo.TValue
	kb exttinygo.TKeyBuilder
}

type Intent_View_air_ProformaPrintedDocs struct {
	intent exttinygo.TIntent
}

func (v Value_View_air_ProformaPrintedDocs) Get_FirstOffset() int64 {
	return v.tv.AsInt64("FirstOffset")
}

func (v Value_View_air_ProformaPrintedDocs) Get_LastOffset() int64 {
	return v.tv.AsInt64("LastOffset")
}

func (i Intent_View_air_ProformaPrintedDocs) Set_FirstOffset(value int64) Intent_View_air_ProformaPrintedDocs {
	i.intent.PutInt64("FirstOffset", value)
	return i
}

func (i Intent_View_air_ProformaPrintedDocs) Set_LastOffset(value int64) Intent_View_air_ProformaPrintedDocs {
	i.intent.PutInt64("LastOffset", value)
	return i
}

func (r View_air_ProformaPrintedDocs) PkgPath() string {
	return Package_air.Path
}

func (r View_air_ProformaPrintedDocs) Entity() string {
	return "ProformaPrintedDocs"
}

func (v View_air_ProformaPrintedDocs) Insert(year int32, dayofyear int32) Intent_View_air_ProformaPrintedDocs {
	kb := exttinygo.KeyBuilder(exttinygo.StorageView, v.fQName)
	kb.PutInt32("Year", year)
	kb.PutInt32("DayOfYear", dayofyear)
	return Intent_View_air_ProformaPrintedDocs{intent: exttinygo.NewValue(kb)}
}

func (v View_air_ProformaPrintedDocs) Keys() []string {
	return []string{"Year", "DayOfYear"}
}

func (v View_air_ProformaPrintedDocs) Update(year int32, dayofyear int32) Intent_View_air_ProformaPrintedDocs {
	existingValue := v.MustGet(year, dayofyear)
	kb := exttinygo.KeyBuilder(exttinygo.StorageView, v.fQName)
	kb.PutInt32("Year", year)
	kb.PutInt32("DayOfYear", dayofyear)
	return Intent_View_air_ProformaPrintedDocs{intent: exttinygo.UpdateValue(kb, existingValue.tv)}
}

func (v View_air_ProformaPrintedDocs) Get(year int32, dayofyear int32) (Value_View_air_ProformaPrintedDocs, bool) {
	kb := exttinygo.KeyBuilder(exttinygo.StorageView, v.fQName)
	kb.PutInt32("Year", year)
	kb.PutInt32("DayOfYear", dayofyear)
	tv, exists := exttinygo.QueryValue(kb)
	if !exists {
		return Value_View_air_ProformaPrintedDocs{kb: kb}, false
	}
	return Value_View_air_ProformaPrintedDocs{tv: tv, kb: kb}, true
}

func (v View_air_ProformaPrintedDocs) MustGet(year int32, dayofyear int32) Value_View_air_ProformaPrintedDocs {
	kb := exttinygo.KeyBuilder(exttinygo.StorageView, v.fQName)
	kb.PutInt32("Year", year)
	kb.PutInt32("DayOfYear", dayofyear)
	tv := exttinygo.MustGetValue(kb)
	return Value_View_air_ProformaPrintedDocs{tv: tv, kb: kb}
}

func (v Value_View_air_ProformaPrintedDocs) Insert() Intent_View_air_ProformaPrintedDocs {
	return Intent_View_air_ProformaPrintedDocs{intent: exttinygo.NewValue(v.kb)}
}

func (v Value_View_air_ProformaPrintedDocs) Update() Intent_View_air_ProformaPrintedDocs {
	return Intent_View_air_ProformaPrintedDocs{intent: exttinygo.UpdateValue(v.kb, v.tv)}
}

type CDoc_air_VideoRecords struct {
	Type
}

type Value_CDoc_air_VideoRecords struct {
	tv exttinygo.TValue
	kb exttinygo.TKeyBuilder
}

type Intent_CDoc_air_VideoRecords struct {
	intent exttinygo.TIntent
}

func (v Value_CDoc_air_VideoRecords) Get_Name() string {
	return v.tv.AsString("Name")
}

func (v Value_CDoc_air_VideoRecords) Get_Length() int64 {
	return v.tv.AsInt64("Length")
}

func (v Value_CDoc_air_VideoRecords) Get_Date() int64 {
	return v.tv.AsInt64("Date")
}

func (i Intent_CDoc_air_VideoRecords) Set_Name(value string) Intent_CDoc_air_VideoRecords {
	i.intent.PutString("Name", value)
	return i
}

func (i Intent_CDoc_air_VideoRecords) Set_Length(value int64) Intent_CDoc_air_VideoRecords {
	i.intent.PutInt64("Length", value)
	return i
}

func (i Intent_CDoc_air_VideoRecords) Set_Date(value int64) Intent_CDoc_air_VideoRecords {
	i.intent.PutInt64("Date", value)
	return i
}

func (r CDoc_air_VideoRecords) PkgPath() string {
	return Package_air.Path
}

func (r CDoc_air_VideoRecords) Entity() string {
	return "VideoRecords"
}

func (v CDoc_air_VideoRecords) IAmCDoc() {
	return
}

func (v CDoc_air_VideoRecords) QName() exttinygo.QName {
	return exttinygo.QName{FullPkgName: v.PkgPath(), Entity: v.Entity()}
}

func (v CDoc_air_VideoRecords) MustGet(id ID) Value_CDoc_air_VideoRecords {
	kb := exttinygo.KeyBuilder(exttinygo.StorageRecord, v.fQName)
	kb.PutInt64(FieldName_ID, int64(id))
	return Value_CDoc_air_VideoRecords{tv: exttinygo.MustGetValue(kb)}
}

func (v CDoc_air_VideoRecords) Get(id ID) (Value_CDoc_air_VideoRecords, bool) {
	kb := exttinygo.KeyBuilder(exttinygo.StorageRecord, v.fQName)
	kb.PutInt64(FieldName_ID, int64(id))
	tv, exists := exttinygo.QueryValue(kb)
	return Value_CDoc_air_VideoRecords{tv: tv}, exists
}

func (v CDoc_air_VideoRecords) Insert(id ID) Intent_CDoc_air_VideoRecords {
	kb := exttinygo.KeyBuilder(exttinygo.StorageRecord, v.fQName)
	kb.PutInt64(FieldName_ID, int64(id))
	return Intent_CDoc_air_VideoRecords{intent: exttinygo.NewValue(kb)}
}

func (v CDoc_air_VideoRecords) Update(id ID) Intent_CDoc_air_VideoRecords {
	existingValue := v.MustGet(id)
	kb := exttinygo.KeyBuilder(exttinygo.StorageRecord, v.fQName)
	kb.PutInt64(FieldName_ID, int64(id))
	return Intent_CDoc_air_VideoRecords{intent: exttinygo.UpdateValue(kb, existingValue.tv)}
}

func (v Value_CDoc_air_VideoRecords) Insert() Intent_CDoc_air_VideoRecords {
	return Intent_CDoc_air_VideoRecords{intent: exttinygo.NewValue(v.kb)}
}

func (v Value_CDoc_air_VideoRecords) Update() Intent_CDoc_air_VideoRecords {
	return Intent_CDoc_air_VideoRecords{intent: exttinygo.UpdateValue(v.kb, v.tv)}
}

type Projector_air_ProjectorNewVideoRecord struct {
	Type
	_event exttinygo.TValue
}

func (p Projector_air_ProjectorNewVideoRecord) Event() Event {
	return Event{
		WLogOffset: p.event().AsInt64("WLogOffset"),
	}
}

func (p Projector_air_ProjectorNewVideoRecord) event() exttinygo.TValue {
	if p._event == 0 {
		p._event = eventFunc()
	}
	return p._event
}

func (r Projector_air_ProjectorNewVideoRecord) WorkspaceDescriptor() string {
	return Package_air.WS_RestaurantWS.Descriptor()
}

func (pkg TPackage_air) Projector_ProjectorNewVideoRecord() Projector_air_ProjectorNewVideoRecord {
	return Projector_air_ProjectorNewVideoRecord{}
}

func (r Projector_air_ProjectorNewVideoRecord) PkgPath() string {
	return Package_air.Path
}

func (r Projector_air_ProjectorNewVideoRecord) Entity() string {
	return "ProjectorNewVideoRecord"
}

func (p Projector_air_ProjectorNewVideoRecord) CUDs_air_VideoRecords() iter.Seq[Value_CDoc_air_VideoRecords] {
	return func(yield func(Value_CDoc_air_VideoRecords) bool) {
		cudsValue := p.event().AsValue("CUDs")
		for i := 0; i < cudsValue.Len(); i++ {
			cudValue := cudsValue.GetAsValue(i)
			cudQName := cudValue.AsQName("sys.QName")
			if cudQName.FullPkgName == Package_air.CDoc_VideoRecords.PkgPath() && cudQName.Entity == Package_air.CDoc_VideoRecords.Entity() {
				if !yield(Value_CDoc_air_VideoRecords{tv: cudValue}) {
					return
				}
			}
		}
	}
}

type Projector_air_ProjectorODoc struct {
	Type
	_event exttinygo.TValue
}

func (p Projector_air_ProjectorODoc) Event() Event {
	return Event{
		WLogOffset: p.event().AsInt64("WLogOffset"),
	}
}

func (p Projector_air_ProjectorODoc) event() exttinygo.TValue {
	if p._event == 0 {
		p._event = eventFunc()
	}
	return p._event
}

func (r Projector_air_ProjectorODoc) WorkspaceDescriptor() string {
	return Package_air.WS_RestaurantWS.Descriptor()
}

func (pkg TPackage_air) Projector_ProjectorODoc() Projector_air_ProjectorODoc {
	return Projector_air_ProjectorODoc{}
}

func (p Projector_air_ProjectorODoc) ODoc() (Value_sys_ODoc, bool) {
	arg := p.event().AsValue("ArgumentObject")
	argQName := arg.AsQName("sys.QName")
	if !IsODoc(argQName) {
		return Value_sys_ODoc{}, false
	}

	return Value_sys_ODoc{
		event: p.event(),
		v:     arg,
		qName: exttinygo.QName{FullPkgName: argQName.FullPkgName, Entity: argQName.Entity},
	}, true
}

func (r Projector_air_ProjectorODoc) PkgPath() string {
	return Package_air.Path
}

func (r Projector_air_ProjectorODoc) Entity() string {
	return "ProjectorODoc"
}

func (p Projector_air_ProjectorODoc) Arg_sys_ODoc() (Value_ODoc_sys_ODoc, bool) {
	arg := p.event().AsValue("ArgumentObject")
	argQName := arg.AsQName("sys.QName")
	if argQName.FullPkgName != Package_sys.ODoc_ODoc.PkgPath() || argQName.Entity != Package_sys.ODoc_ODoc.Entity() {
		return Value_ODoc_sys_ODoc{}, false
	}

	return Value_ODoc_sys_ODoc{tv: arg}, true
}

type Projector_air_ProjectorWRecord struct {
	Type
	_event exttinygo.TValue
}

func (p Projector_air_ProjectorWRecord) Event() Event {
	return Event{
		WLogOffset: p.event().AsInt64("WLogOffset"),
	}
}

func (p Projector_air_ProjectorWRecord) event() exttinygo.TValue {
	if p._event == 0 {
		p._event = eventFunc()
	}
	return p._event
}

func (r Projector_air_ProjectorWRecord) WorkspaceDescriptor() string {
	return Package_air.WS_RestaurantWS.Descriptor()
}

func (pkg TPackage_air) Projector_ProjectorWRecord() Projector_air_ProjectorWRecord {
	return Projector_air_ProjectorWRecord{}
}

func (p Projector_air_ProjectorWRecord) CUDs_WRecord() iter.Seq[Value_sys_WRecord] {
	return func(yield func(Value_sys_WRecord) bool) {
		cudsValue := p.event().AsValue("CUDs")
		for i := 0; i < cudsValue.Len(); i++ {
			cudValue := cudsValue.GetAsValue(i)
			cudQName := cudValue.AsQName("sys.QName")
			if IsWRecord(cudQName) {
				if !yield(Value_sys_WRecord{event: p.event(), v: cudValue}) {
					return
				}
			}
		}
	}
}

func (r Projector_air_ProjectorWRecord) PkgPath() string {
	return Package_air.Path
}

func (r Projector_air_ProjectorWRecord) Entity() string {
	return "ProjectorWRecord"
}

func (p Projector_air_ProjectorWRecord) CUDs_sys_WRecord() iter.Seq[Value_WRecord_sys_WRecord] {
	return func(yield func(Value_WRecord_sys_WRecord) bool) {
		cudsValue := p.event().AsValue("CUDs")
		for i := 0; i < cudsValue.Len(); i++ {
			cudValue := cudsValue.GetAsValue(i)
			cudQName := cudValue.AsQName("sys.QName")
			if cudQName.FullPkgName == Package_sys.WRecord_WRecord.PkgPath() && cudQName.Entity == Package_sys.WRecord_WRecord.Entity() {
				if !yield(Value_WRecord_sys_WRecord{tv: cudValue}) {
					return
				}
			}
		}
	}
}

type CSingleton_air_RestaurantDescriptor struct {
	Type
}

type Value_CSingleton_air_RestaurantDescriptor struct {
	tv exttinygo.TValue
}

type Intent_CSingleton_air_RestaurantDescriptor struct {
	intent exttinygo.TIntent
}

func (r CSingleton_air_RestaurantDescriptor) PkgPath() string {
	return Package_air.Path
}

func (r CSingleton_air_RestaurantDescriptor) Entity() string {
	return "RestaurantDescriptor"
}

type View_air_VideoRecordArchive struct {
	Type
}

type Value_View_air_VideoRecordArchive struct {
	tv exttinygo.TValue
	kb exttinygo.TKeyBuilder
}

type Intent_View_air_VideoRecordArchive struct {
	intent exttinygo.TIntent
}

func (v Value_View_air_VideoRecordArchive) Get_TotalLength() int64 {
	return v.tv.AsInt64("TotalLength")
}

func (i Intent_View_air_VideoRecordArchive) Set_TotalLength(value int64) Intent_View_air_VideoRecordArchive {
	i.intent.PutInt64("TotalLength", value)
	return i
}

func (r View_air_VideoRecordArchive) PkgPath() string {
	return Package_air.Path
}

func (r View_air_VideoRecordArchive) Entity() string {
	return "VideoRecordArchive"
}

func (v View_air_VideoRecordArchive) Insert(year int32, month int32, day int32) Intent_View_air_VideoRecordArchive {
	kb := exttinygo.KeyBuilder(exttinygo.StorageView, v.fQName)
	kb.PutInt32("Year", year)
	kb.PutInt32("Month", month)
	kb.PutInt32("Day", day)
	return Intent_View_air_VideoRecordArchive{intent: exttinygo.NewValue(kb)}
}

func (v View_air_VideoRecordArchive) Keys() []string {
	return []string{"Year", "Month", "Day"}
}

func (v View_air_VideoRecordArchive) Update(year int32, month int32, day int32) Intent_View_air_VideoRecordArchive {
	existingValue := v.MustGet(year, month, day)
	kb := exttinygo.KeyBuilder(exttinygo.StorageView, v.fQName)
	kb.PutInt32("Year", year)
	kb.PutInt32("Month", month)
	kb.PutInt32("Day", day)
	return Intent_View_air_VideoRecordArchive{intent: exttinygo.UpdateValue(kb, existingValue.tv)}
}

func (v View_air_VideoRecordArchive) Get(year int32, month int32, day int32) (Value_View_air_VideoRecordArchive, bool) {
	kb := exttinygo.KeyBuilder(exttinygo.StorageView, v.fQName)
	kb.PutInt32("Year", year)
	kb.PutInt32("Month", month)
	kb.PutInt32("Day", day)
	tv, exists := exttinygo.QueryValue(kb)
	if !exists {
		return Value_View_air_VideoRecordArchive{kb: kb}, false
	}
	return Value_View_air_VideoRecordArchive{tv: tv, kb: kb}, true
}

func (v View_air_VideoRecordArchive) MustGet(year int32, month int32, day int32) Value_View_air_VideoRecordArchive {
	kb := exttinygo.KeyBuilder(exttinygo.StorageView, v.fQName)
	kb.PutInt32("Year", year)
	kb.PutInt32("Month", month)
	kb.PutInt32("Day", day)
	tv := exttinygo.MustGetValue(kb)
	return Value_View_air_VideoRecordArchive{tv: tv, kb: kb}
}

func (v Value_View_air_VideoRecordArchive) Insert() Intent_View_air_VideoRecordArchive {
	return Intent_View_air_VideoRecordArchive{intent: exttinygo.NewValue(v.kb)}
}

func (v Value_View_air_VideoRecordArchive) Update() Intent_View_air_VideoRecordArchive {
	return Intent_View_air_VideoRecordArchive{intent: exttinygo.UpdateValue(v.kb, v.tv)}
}
