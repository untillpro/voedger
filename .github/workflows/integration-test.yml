# Copyright (c) 2023 Sigma-Soft, Ltd.
# @author Aleksei Ponomarev
#
# To set up a secret in your GitHub repository, follow these steps:
#    - Go to your repository in GitHub and click on the "Settings" tab.
#    - In the left sidebar, click on "Secrets".
#    - Click on the "New secret" button.
#    - Enter a name for your secret (e.g., "AWS_ACCESS_KEY_ID"), and paste in the value of your AWS access key ID.
#    - Click on the "Add secret" button to save the secret.
# You can repeat these steps for each secret you need to store:
#    -  such as your AWS secret access key
#    -  SSH private key
#    -  and any other sensitive information.
# To use the secrets in your GitHub Actions workflow, you can reference them using the syntax ${{ secrets.SECRET_NAME }}.

name: ctool integration test

on:
  issues:
    types: [opened]

jobs:
  deploy:
    if: ${{ contains(github.event.issue.title, 'ctoolintegrationtest') }}
    runs-on: ubuntu-latest
    env:
      SSH_PORT: 2214
      SSH_OPTIONS: "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR"
    steps:
    - name: Check Issue
      run: |

        ORG_NAME="voedger"
        TEAM_NAME="DevOps_ctool"
        USER_NAME="${{ github.event.issue.user.login }}"

        # Check organization membership
        ORG_MEMBERSHIP=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.REPOREADING_TOKEN }}" "https://api.github.com/orgs/$ORG_NAME/members/$USER_NAME")

        if [[ $ORG_MEMBERSHIP -eq 204 ]]; then
          echo "The user $USER_NAME is a member of the organization $ORG_NAME."
        else
          echo "The user $USER_NAME is not a member of the organization $ORG_NAME."
          exit 1
        fi

        # Check team membership
        TEAM_MEMBERSHIP=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.REPOREADING_TOKEN }}" "https://api.github.com/orgs/$ORG_NAME/teams/$TEAM_NAME/memberships/$USER_NAME")

        if [[ $TEAM_MEMBERSHIP -eq 200 ]]; then
          echo "The user $USER_NAME is a member of the team $TEAM_NAME within the organization $ORG_NAME."
        else
          echo "The user $USER_NAME is not a member of the team $TEAM_NAME within the organization $ORG_NAME."
          exit 1
        fi

    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform -chdir=cmd/ctool/scripts/terraform/ init
      env:
        TF_VAR_ssh_private_key: ${{ secrets.AWS_SSH_KEY }}

    - name: Terraform plan
      run: terraform -chdir=cmd/ctool/scripts/terraform/ plan -out=terraform.tfplan
      env:
        TF_VAR_ssh_private_key: ${{ secrets.AWS_SSH_KEY }}
        TF_VAR_gh_token: ${{ secrets.REPOREADING_TOKEN }}
 
    - name: Terraform apply
      run: terraform -chdir=cmd/ctool/scripts/terraform/ apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_ssh_private_key: ${{ secrets.AWS_SSH_KEY }}
        TF_VAR_gh_token: ${{ secrets.REPOREADING_TOKEN }}

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.0
      with:
        ssh-private-key: ${{ secrets.AWS_SSH_KEY }}
        
    - name: Load environment file
      run: |
           echo "PUBLIC_IP=$(terraform -chdir=cmd/ctool/scripts/terraform/ output -raw public_ip_node_03)" >> $GITHUB_ENV
           echo "CTOOL_IP=$(terraform -chdir=cmd/ctool/scripts/terraform/ output -raw public_ip_node_00)" >> $GITHUB_ENV
           echo "SSH_PORT=2214" >> $GITHUB_ENV
           if [ -n "${SSH_PORT:-}" ]; then
               SSH_OPTIONS+=" -p $SSH_PORT"
           fi
           echo "SSH_OPTIONS=$SSH_OPTIONS" >> $GITHUB_ENV

    - name: Test deploy cluster. Simulate error when init. Continue with repeat after problem elimination.
      run: | 
        if ! ssh ${{ env.SSH_OPTIONS }} ubuntu@${{ env.CTOOL_IP }} "cd /home/ubuntu/voedger/cmd/ctool && ./ctool init SE 10.0.0.11 10.0.0.12 10.0.0.13 10.0.0.14 10.0.0.15 -p ${{ env.SSH_PORT }} -v --ssh-key /tmp/amazonKey.pem; exit \$?"; then
          echo "Error: SSH key permission too open."
            if ssh ${{ env.SSH_OPTIONS }} ubuntu@${{ env.CTOOL_IP }} "chmod 400 /tmp/amazonKey.pem; exit \$?"; then
              echo "Changing ssh key permissions to more restrective."
                if ssh ${{ env.SSH_OPTIONS }} ubuntu@${{ env.CTOOL_IP }} "cd /home/ubuntu/voedger/cmd/ctool && ./ctool repeat -v --ssh-key /tmp/amazonKey.pem; exit \$?"; then
                  echo "Cluster init reepeat succesfull." 
                else 
                  echo "Error: cluster init repeat. Exit."
                  exit 1
                fi 
            else 
              echo "Error: changing ssh key permissions to more restrective. Exit."
              exit 1
            fi 
        else 
          echo "Error: connect to resources with too open ssh key not possible. Exit."
          exit 1
        fi

    - name: Smoke test - wait for db cluster building
      run: |
        echo "Work with ${{ env.PUBLIC_IP }}"
        count=0
        while [ $count -lt 60 ]; do
           if [ $(ssh ${{ env.SSH_OPTIONS }} ubuntu@${{ env.PUBLIC_IP }} docker exec '$(docker ps -qf name=scylla)' nodetool status | grep -c "^UN\s") -eq 3 ]; then
           echo "Scylla initialization success"
             break
           fi
           echo "Still wait for scylla initialization.."
           sleep 5
           count=$((count+1))
        done
        if [ $count -eq 60 ]; then
           echo "Scylla initialization timed out."
           exit 1
        fi

    - name: Check Prometheus and Alertmanager
      run: |
        NODES=("10.0.0.11" "10.0.0.12")

        for node in "${NODES[@]}"; do
          PROMETHEUS_RESPONSE=$(ssh ${{ env.SSH_OPTIONS }} ubuntu@${{ env.PUBLIC_IP }} "curl -sL -w '%{http_code}' -o /dev/null http://${node}:9090/-/healthy")
          if [[ "${PROMETHEUS_RESPONSE}" == "200" ]]; then
            echo "Prometheus is up and running on node ${node}."
          else
            echo "Failed to reach Prometheus on node ${node}. HTTP response code: ${PROMETHEUS_RESPONSE}"
            exit 1
          fi

          ALERTMANAGER_RESPONSE=$(ssh ${{ env.SSH_OPTIONS }} ubuntu@${{ env.PUBLIC_IP }} "curl -sL -w '%{http_code}' -o /dev/null http://${node}:9093/-/healthy")
          if [[ "${ALERTMANAGER_RESPONSE}" == "200" ]]; then
            echo "Alertmanager is up and running on node ${node}."
          else
            echo "Failed to reach Alertmanager on node ${node}. HTTP response code: ${ALERTMANAGER_RESPONSE}"
            exit 1
          fi
        done

    - name: Smoke test - node fail simulation. Drop node.
      run: terraform -chdir=cmd/ctool/scripts/terraform/ destroy -target=aws_instance.node_02 -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_ssh_private_key: ${{ secrets.AWS_SSH_KEY }}
        TF_VAR_gh_token: ${{ secrets.REPOREADING_TOKEN }}

    - name: Smoke test - replace scylla node to new hardware
      run: | 
        if ssh ${{ env.SSH_OPTIONS }} ubuntu@${{ env.CTOOL_IP }} "cd /home/ubuntu/voedger/cmd/ctool && ./ctool replace db-node-1 10.0.0.16 -v --ssh-key /tmp/amazonKey.pem; exit \$?"; then
          echo "Replace node success"
        else 
          echo "Failed to replace scylla node in cluster"
          exit 1
        fi

    - name: Smoke test - wait until db replaced node is up
      run: |
        echo "Work with ${{ env.PUBLIC_IP }}"
        count=0
        while [ $count -lt 60 ]; do
           if [ $(ssh ${{ env.SSH_OPTIONS }} ubuntu@${{ env.PUBLIC_IP }} docker exec '$(docker ps -qf name=scylla)' nodetool status | grep -c "^UN\s") -eq 3 ]; then
           echo "Scylla initialization success"
             break
           fi
           echo "Still wait for scylla initialization.."
           sleep 5
           count=$((count+1))
        done
        if [ $count -eq 60 ]; then
           echo "Scylla initialization timed out."
           exit 1
        fi

    - name: Smoke test - AppNode fail simulation. Drop node.
      run: terraform -chdir=cmd/ctool/scripts/terraform/ destroy -target=aws_instance.node_01 -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_ssh_private_key: ${{ secrets.AWS_SSH_KEY }}
        TF_VAR_gh_token: ${{ secrets.REPOREADING_TOKEN }}

    - name: Smoke test - replace AppNode to new hardware
      run: | 
        if ssh ${{ env.SSH_OPTIONS }} ubuntu@${{ env.CTOOL_IP }} "cd /home/ubuntu/voedger/cmd/ctool && ./ctool replace app-node-2 10.0.0.17 -v --trace --ssh-key /tmp/amazonKey.pem; exit \$?"; then
          echo "Replace AppNode success"
        else 

            count=0
            while [ $count -lt 5 ]; do
               if ssh ${{ env.SSH_OPTIONS }} ubuntu@${{ env.CTOOL_IP }} "cd /home/ubuntu/voedger/cmd/ctool && ./ctool repeat -v --ssh-key /tmp/amazonKey.pem; exit \$?"; then
               echo "Replace AppNode success"
                 break
               fi
               echo "Still wait for new hardware.."
               sleep 10
               count=$((count+1))
            done
            if [ $count -eq 5 ]; then
               echo "Failed to replace AppNode in Voedger cluster"
               exit 1
            fi

        fi

    - name: Smoke test - check Prometheus and Alertmanager is up after replace node
      run: |
        IP_ADDRESS="10.0.0.17"
        retries=5
        while [[ $retries -gt 0 ]]; do
          success=true


          PROMETHEUS_RESPONSE=$(ssh ${{ env.SSH_OPTIONS }} ubuntu@${{ env.PUBLIC_IP }} "curl -sL -w '%{http_code}' -o /dev/null http://${IP_ADDRESS}:9090/-/healthy >/dev/null 2>&1; RETVAL=\$?; if [ \$RETVAL -eq 0 ]; then curl -sL -w '%{http_code}' -o /dev/null http://${IP_ADDRESS}:9090/-/healthy; else echo '000'; fi" 2>/dev/null)
           
          if [[ "$PROMETHEUS_RESPONSE" == "200" ]]; then
            echo "Prometheus is up and running on IP address ${IP_ADDRESS}."
          elif [[ "$PROMETHEUS_RESPONSE" == "000" ]]; then
             echo "Failed to connect to Prometheus on IP address ${IP_ADDRESS}."
             success=false
          else
             echo "Failed to reach Prometheus on IP address ${IP_ADDRESS}. HTTP response code: $PROMETHEUS_RESPONSE"
             success=false
          fi
        
          ALERTMANAGER_RESPONSE=$(ssh ${{ env.SSH_OPTIONS }} ubuntu@${{ env.PUBLIC_IP }} "curl -sL -w '%{http_code}' -o /dev/null http://${IP_ADDRESS}:9093/-/healthy >/dev/null 2>&1; RETVAL=\$?; if [ \$RETVAL -eq 0 ]; then curl -sL -w '%{http_code}' -o /dev/null http://${IP_ADDRESS}:9093/-/healthy; else echo '000'; fi" 2>/dev/null)
           
          if [[ "$ALERTMANAGER_RESPONSE" == "200" ]]; then
            echo "Alertmanager is up and running on IP address ${IP_ADDRESS}."
          elif [[ "$ALERTMANAGER_RESPONSE" == "000" ]]; then
             echo "Failed to connect to Alertmanager on IP address ${IP_ADDRESS}."
             success=false
          else
             echo "Failed to reach Alertmanager on IP address ${IP_ADDRESS}. HTTP response code: $ALERTMANAGER_RESPONSE"
             success=false
          fi
        
          if $success; then
            break
          fi
        
          retries=$((retries - 1))
          if [[ $retries -eq 0 ]]; then
            echo "Maximum retries exceeded. Exiting."
            exit 1
          fi
       
          echo "Retrying in 10 seconds..."
          sleep 10
        done

    - name: Terraform destroy
      if: always()
      run: terraform -chdir=cmd/ctool/scripts/terraform/ destroy -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_ssh_private_key: ${{ secrets.AWS_SSH_KEY }}
        TF_VAR_gh_token: ${{ secrets.REPOREADING_TOKEN }}

    - name: Add comment to issue
      if: ${{ always() }}
      run: |
        curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
          --header 'Authorization: Bearer ${{ secrets.REPOREADING_TOKEN }}' \
          --header 'Content-Type: application/json' \
          --data '{
            "body": "This is a comment that will be automatic added to issue #${{ github.event.issue.number }} by the GitHub Action.\nThe result of the GitHub Action is ${{ job.status }}."
          }'
